#!/bin/bash
set -euo pipefail

# Wait for syslog to start
echo "Waiting for syslog to start"
while ! netstat -lnpu | grep -q rsyslogd; do
    sleep 1
done

# All output after this is redirected to syslog via logger command
exec 1> >(logger -t startup)
exec 2>&1

if [[ -n ${DEBUG:-} ]]; then
    set -x
fi

mkdir -p "${DHCP_DIR}" "${DHCP_DIR}"/hosts "${TFTP_DIR}" "${HTTP_DIR}" "${CRASH_DIR}"

# Install grub if needed
if [[ ! -e "${TFTP_DIR}"/grubx64.efi || ! -e "${TFTP_DIR}"/bootx64.efi || \
      ! -e "${TFTP_DIR}"/grub/x86_64-efi ]]; then
    echo "* * * Installing bootloader"
    mkdir -p "${TFTP_DIR}"/grub
    cp /grubfiles/grubx64.efi /grubfiles/bootx64.efi "${TFTP_DIR}"/
    cp -r /grubfiles/x86_64-efi "${TFTP_DIR}"/grub/
fi

# Get the ISO if needed
if [[ ! -e "${HTTP_DIR}"/${ISO_FILE} && -n ${ISO_URL} ]]; then
    echo "* * * Downloading ISO from [${ISO_URL}]"
    curl -fsSL ${ISO_URL} -o "${HTTP_DIR}"/${ISO_FILE}
fi

# Get the kernel and initrd from the ISO
initrd_file="initrd-${ISO_FILE%.*}"
kernel_file="vmlinuz-${ISO_FILE%.*}"
if [[ (! -e "${TFTP_DIR}/${initrd_file}" || ! -e "${TFTP_DIR}/${kernel_file}") && -n ${ISO_FILE} ]]; then
    echo "* * * Extracting kernel/initrd from ISO"
    mount -o loop,ro "${HTTP_DIR}"/${ISO_FILE} /mnt
    cp /mnt/casper/vmlinuz "${TFTP_DIR}/${kernel_file}"
    cp /mnt/casper/initrd "${TFTP_DIR}/${initrd_file}"
    umount /mnt
fi

# Configure grub
mkdir -p "${TFTP_DIR}/grub"
if [[ ! -e "${TFTP_DIR}/grub/grub.cfg" ]]; then
    cp /templates/grub.cfg.template "${TFTP_DIR}/grub/grub.cfg"
fi

# Configure DHCP for this subnet
if [[ -n "${NETWORK}" && -n "${ROUTER_IP}" && -n "${DNS_IP}" ]]; then
    echo "* * * Updating dhcp subnet config"
    cat /templates/dnsmasq-subnet.conf.template | envsubst > "${DHCP_DIR}/subnet.conf"
fi

# Configure nginx
cat /templates/nginx.conf.template | envsubst '${HTTP_DIR}' > /etc/nginx/nginx.conf


# Lowercase the MAC address
if [[ -n ${TARGET_SERVER_MAC} ]]; then
    TARGET_SERVER_MAC=$(echo "${TARGET_SERVER_MAC}" | tr '[:upper:]' '[:lower:]')
fi

# Create subdir for this server
target_conf_dir_tftp=""
target_conf_dir_http=""
if [[ -n "${TARGET_SERVER_MAC}" ]]; then
    target_server_mac_dashes="$( echo "${TARGET_SERVER_MAC}" | tr ':' '-')"
    target_conf_dir_http="${HTTP_DIR}/${target_server_mac_dashes}"
    target_conf_dir_tftp="${TFTP_DIR}/${target_server_mac_dashes}"
    mkdir -p "${target_conf_dir_http}"
    mkdir -p "${target_conf_dir_tftp}"
fi

# Link ISO file for this server to install
if [[ -n "${target_conf_dir_http}" && -n "${ISO_FILE}" ]]; then
    (
        cd "${target_conf_dir_http}"
        ln -fs ../"${ISO_FILE}" install.iso
    )
fi

# Configure kernel and initrd for this server
if [[ -n "${target_conf_dir_tftp}" && (! -e "${target_conf_dir_tftp}"/vmlinuz || ! -e "${target_conf_dir_tftp}"/initrd) ]]; then
    (
        cd "${target_conf_dir_tftp}"
        ln -fs ../${kernel_file} vmlinuz
        ln -fs ../${initrd_file} initrd
    )
fi

# Configure cloud-init files for this server
if [[ -n "${TARGET_SERVER_NAME}" && -n "${TARGET_PW_HASH}" && -n "${TARGET_USERNAME}" && \
      -n "${TARGET_SERVER_NIC}" && -n "${TARGET_SERVER_IP}" && -n "${CIDR}" && \
      -n "${ROUTER_IP}" && -n "${DNS_IP}" && -n "${target_conf_dir_http}" ]]; then
    echo "* * * Updating cloud-init data"
    cat /templates/meta-data.template | envsubst > "${target_conf_dir_http}"/meta-data
    cat /templates/user-data.template | envsubst > "${target_conf_dir_http}"/user-data
    cat /templates/vendor-data.template | envsubst > "${target_conf_dir_http}"/vendor-data
fi

# Add a DHCP reservation for this server
if [[ -n "${TARGET_SERVER_NAME}" && -n "${TARGET_SERVER_MAC}" && -n "${TARGET_SERVER_IP}" ]]; then
    echo "* * * Updating dhcp host reservations"
    cat /templates/dnsmasq-hosts.conf.template | envsubst > "${DHCP_DIR}/hosts/${TARGET_SERVER_NAME}.conf"
fi

set +x
echo "Starting services"
supervisorctl start all
sleep 2
echo
echo "======================================================================="
supervisorctl status all | grep -v startup
echo
echo "Finished startup"
echo "======================================================================="
echo
